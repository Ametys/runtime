<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2010 Anyware Services

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   -->
<!--+
    | This is the Cocoon web-app configurations file
    +-->
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
    <description>RuntimeApplication</description>

    <listener>
        <listener-class>org.ametys.runtime.plugins.admin.jvmstatus.SessionCountListener</listener-class>
    </listener>
    <listener>
        <listener-class>org.ametys.runtime.plugins.admin.jvmstatus.RequestCountListener</listener-class>
    </listener>

    <!-- Servlet Configuration ========================================== -->

    <servlet>
        <servlet-name>RuntimeApplicationServlet</servlet-name>
        <display-name>Runtime Application Servlet</display-name>

        <!--
            The regular servlet class (trusts the servlet container classloader)
        -->
        <servlet-class>org.ametys.runtime.servlet.RuntimeServlet</servlet-class>

        <!--
            This parameter tells cocoon to set the thread's context classloader to
            its own classloader. If you experience strange classloader issues,
            try setting this parameter to "true" or using ParanoidCocoonServlet.
        -->
        <init-param>
            <param-name>init-classloader</param-name>
            <param-value>false</param-value>
        </init-param>

        <!--
            This parameter points to the main configuration file for Cocoon.
            Note that the path is specified in absolute notation but it will be
            resolved relative to the servlets webapp context path
        -->
        <init-param>
            <param-name>configurations</param-name>
            <param-value>/WEB-INF/cocoon.xconf</param-value>
        </init-param>
        
        <!--
            This parameter switches the logging system from LogKit to Log4J for Cocoon.
            Log4J has to be configured already.
        -->
        <init-param>
            <param-name>logger-class</param-name>
            <param-value>org.apache.avalon.excalibur.logger.Log4JLoggerManager</param-value>
        </init-param>

        <!--
            This parameter indicates the configuration file of the Log4j management
        -->
        <init-param>
            <param-name>log4j-config</param-name>
            <param-value>/WEB-INF/log4j.xml</param-value>
        </init-param>

        <!--
            This parameter indicates the category id of the logger from the LogKit
            configuration used by the CocoonServlet.
        -->
        <init-param>
            <param-name>servlet-logger</param-name>
            <param-value>access</param-value>
        </init-param>

        <!--
            This parameter indicates the category id of the logger from the LogKit
            management configuration for the Cocoon engine.
            This logger is used for all components described in the cocoon.xconf
            and sitemap.xmap file not having specified a logger with the
            logger="..." attribute in the component configuration file.
        -->
        <init-param>
            <param-name>cocoon-logger</param-name>
            <param-value>core</param-value>
        </init-param>

        <!--
            This parameter indicates the log level to use throughout startup of the system.
            As soon as the logkit.xconf the setting of the logkit.xconf configuration is
            used instead! Only for startup and if the logkit.xconf is not readable/available
            this log level is of importance.
            
            Available levels are:
            DEBUG:        prints all level of log messages.
            INFO:         prints all level of log messages except DEBUG ones.
            WARN:         prints all level of log messages except DEBUG and INFO ones.
            ERROR:        prints all level of log messages except DEBUG, INFO and WARN ones.
            FATAL_ERROR: prints only log messages of this level
        -->
        <init-param>
            <param-name>log-level</param-name>
            <param-value>INFO</param-value>
        </init-param>

        <!--
            Causes all files in multipart requests to be processed.
            Default is false for security reasons.  
            Unsupported values will be interpreted as false.
        -->
        <init-param>
            <param-name>enable-uploads</param-name>
            <param-value>true</param-value>
        </init-param>

        <!--
            This parameter allows to specify where Cocoon should put uploaded files.
            The path specified can be either absolute or relative to the context 
            path of the servlet. On windows platform, absolute directory must start
            with volume: C:\Path\To\Upload\Directory
            
            The default directory is "upload-dir" in the work-directory
            <init-param>
            <param-name>upload-directory</param-name>
            <param-value>WEB-INF/data/uploads</param-value>
            </init-param>
            
            WARNING : don't use this attribute, it will be overridden by the Runtime Config
        -->

        <!--
            Causes all files in multipart requests to be saved to upload-dir.
            Default is true for security reasons.  
            Unsupported values will be interpreted as false.
        -->
        <init-param>
            <param-name>autosave-uploads</param-name>
            <param-value>true</param-value>
        </init-param>

        <!--
            Specify handling of name conflicts when saving uploaded files
            to disk.  Acceptable values are deny, allow, rename (default).
            Files are renamed x_filename where x is an integer value incremented
            to make the new filename unique.
        -->
        <init-param>
            <param-name>overwrite-uploads</param-name>
            <param-value>rename</param-value>
        </init-param>

        <!--
            Specify maximum allowed size of the upload. Defaults to 10 Mb.
            <init-param>
            <param-name>upload-max-size</param-name>
            <param-value>10000000</param-value>
            </init-param>    
            
            WARNING : don't use this attribute, it will be overridden by the Runtime Config
        -->

        <!--
            This parameter allows to specify where Cocoon should create its page
            and other objects cache. The path specified can be either absolute or
            relative to the context path of the servlet. On windows platform,
            absolute directory must start with volume: C:\Path\To\Cache\Directory
            
            The default directory is "cache-dir" in the work-directory
            
            <init-param>
            <param-name>cache-directory</param-name>
            <param-value>WEB-INF/work/cache-dir</param-value>
            </init-param>
        -->

        <!--
            This parameter allows to specify where Cocoon should put it's
            working files. The path specified is either absolute or relative
            to the context path of the Cocoon servlet.  On windows platform,
            absolute directory must start with volume: C:\Path\To\Work\Directory
            
            The default directory is "cocoon-files" directory in the servlet
            context's temp directory (context property javax.servlet.context.tempdir).
            
            <init-param>
            <param-name>work-directory</param-name>
            <param-value>WEB-INF/work</param-value>
            </init-param>
        -->

        <!--
            If you set this parameter to 'true' or 'yes', Cocoon will add processing
            time to the end of each response. Value 'hide' adds processing time as an HTML
            comment. By default, processing time is not added (corresponds to value 'no').
            
            <init-param>
            <param-name>show-time</param-name>
            <param-value>hide</param-value>
            </init-param>
        -->

        <!--
            If true or not set, this class will try to catch and handle all Cocoon exceptions.
            If false, it will rethrow them to the servlet container.
        -->
        <init-param>
            <param-name>manage-exceptions</param-name>
            <param-value>true</param-value>
        </init-param>

        <!--
            Set encoding used by the container. If not set the ISO-8859-1 encoding will be assumed.
        -->
        <init-param>
            <param-name>container-encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>

        <!--
            Set form encoding. This will be the character set used to decode request parameters.
            If not set the ISO-8859-1 encoding will be assumed. 
            For Jetty decomment this.
        -->
        <init-param>
            <param-name>form-encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>

        <!--
            This parameter allows you to startup Cocoon2 immediately after startup
            of your servlet engine.
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- URL space mappings ============================================= -->

    <!--
        Cocoon handles all the URL space assigned to the webapp using its sitemap.
        It is recommended to leave it unchanged. Under some circumstances though
        (like integration with proprietary webapps or servlets) you might have
        to change this parameter.
    -->
    <servlet-mapping>
        <servlet-name>RuntimeApplicationServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- various MIME type mappings ====================================== -->

    <mime-mapping>
        <extension>js</extension>
        <mime-type>text/javascript;charset=utf-8</mime-type>
    </mime-mapping>
</web-app>
