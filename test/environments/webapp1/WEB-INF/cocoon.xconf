<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2012 Anyware Services

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   -->
<cocoon version="2.1">

<!--+
    |  This is the Apache Cocoon configuration file. This is the place
    |  where you configure the components that Cocoon uses internally (stuff
    |  like the cache) or handles to the pipeline components
    |  (stuff like XML parsers or XSLT processors).
    +-->

    <component class="org.apache.excalibur.xml.dom.DefaultDOMHandlerFactory" 
                role="org.apache.excalibur.xml.dom.DOMHandlerFactory"/>

  <!-- =========================== Sitemap =============================== -->

  <!--+
      | New implementation of the sitemap. It is interpreted, so load times
      | are super-fast, and request processing is slightly faster than with
      | the compiled engine thanks to the HotSpot VM.
      |
      | Reloading of the sitemap:
      |   The check-reload attribute determines if the sitemap is to be
      |   reloaded on change.
      |   Set to "no", the sitemap is generated once at startup.
      |   Set to "yes", the sitemap is regenerated if it changes.
      |
      | For development environment, set the check-reload to yes.
      | For production environment, it is advisable to set check-reload to no.
      +-->
  <sitemap  check-reload="yes" logger="sitemap"
            file="kernel://sitemap.xmap"
            config="resource://org/ametys/runtime/cocoon/treeprocessor-builtins.xml"
            class="org.ametys.runtime.cocoon.TreeProcessor"/>
      
<!-- =================== Sitemap Input/Output Modules ====================== -->

  <!--+
      | InputModules are a replacement to reading values directly
      | e.g. from request parameters. By using this abstraction and
      | indirection, other components can be more generic and changes
      | to the application logic are easier.
      |
      | A number of components already use InputModules: the sitemap processor,
      | flow, some matchers, the linkrewriting transformer, database actions
      | and more.
      |
      | For example the sitemap processor allows to obtain a value
      | named "foo" from an the InputModule for request parameters by
      | writing {request-param:foo} wherever a sitemap variable is
      | allowed.
      |
      | Some InputModules need the help of other InputModules to
      | obtain values and only apply a function to the obtained value
      | or change the name of the attribute. These modules usually
      | carry "Meta" in their name. An example is the ChainMetaModule
      | which tries several other modules in turn until a non-null
      | value is obtained or all modules are tied.
      |
      | For details and optional configuration parameters refer to the
      | accompanying javadocs.
      +-->
  <input-modules>
    <component-instance class="org.apache.cocoon.components.modules.input.GlobalInputModule" logger="core.modules.input" name="global"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RequestModule" logger="core.modules.input" name="request"/>
    <component-instance class="org.apache.cocoon.components.modules.input.BaseLinkModule" logger="core.modules.input" name="baselink"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SessionModule" logger="core.modules.input" name="session"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RequestParameterModule" logger="core.modules.input" name="request-param"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RawRequestParameterModule" logger="core.modules.input" name="raw-request-param"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RequestAttributeModule" logger="core.modules.input" name="request-attr"/>
    <component-instance class="org.apache.cocoon.components.modules.input.HeaderAttributeModule" logger="core.modules.input" name="request-header"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SessionAttributeModule" logger="core.modules.input" name="session-attr"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SystemPropertyModule" logger="core.modules.input" name="system-property"/>
    <component-instance class="org.apache.cocoon.components.modules.input.NullInputModule" logger="core.modules.input" name="nullinput"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RealPathModule" logger="core.modules.input" name="realpath"/>

    <component-instance class="org.ametys.runtime.cocoon.LocaleInputModule" logger="core.modules.input" name="locale"/>
  </input-modules>

  <!--+
      | OutputModules are companion modules for InputModules.
      |
      | The same principles apply here, only that OutputModules allow
      | writing data to places. Apparently, there are a lot less
      | places to write to than to read data from, thus there are only
      | a few OutputModules coming with Apache Cocoon.
      |
      | One special feature of OutputModules is, that they expose some
      | limited transactional behaviour. Hence it does not suffice to
      | write a value, but it is required to confirm this at the
      | end. Until then, the value could not be read from the
      | corresponding InputModule. This behaviour is not enfored but
      | it should be expected. Omitting a commit or rollback is an
      | error.
      |
      | OutputModules are currently used by flow, a number of actions
      | and transformers.
      +-->
  <output-modules>
    <component-instance class="org.apache.cocoon.components.modules.output.RequestAttributeOutputModule" logger="core.modules.output" name="request-attr"/>
    <component-instance class="org.apache.cocoon.components.modules.output.RequestAttributeMap" logger="core.modules.output" name="request-attr-map"/>
    <component-instance class="org.apache.cocoon.components.modules.output.SessionAttributeOutputModule" logger="core.modules.output" name="session-attr"/>
  </output-modules>

<!-- ================================= XML ================================ -->

  <!--+
      | Source Factories
      |
      | Each source factory adds a special uri schemes to the system.
      +-->
  <source-factories>
    <component-instance class="org.ametys.runtime.cocoon.source.KernelSourceFactory" name="kernel"/>
    <component-instance class="org.ametys.runtime.cocoon.source.ResourceSourceFactory" name="resource"/>
    <component-instance class="org.ametys.runtime.cocoon.source.ZipSourceFactory" name="zip"/>
    <component-instance class="org.ametys.runtime.plugin.PluginSourceFactory" name="plugin"/>
    <component-instance class="org.ametys.runtime.workspace.WorkspaceSourceFactory" name="workspace"/>
    
    <component-instance class="org.apache.cocoon.components.source.impl.ContextSourceFactory" name="context"/>
    <component-instance class="org.apache.cocoon.components.source.impl.SitemapSourceFactory" name="cocoon"/>
    <!--+
        | The "file:" source protocol is modifiable (can be written to) and
        | traversable (directory structures can be crawled).
        +-->
    <component-instance class="org.apache.excalibur.source.impl.FileSourceFactory" name="file"/>
    
    <component-instance class="org.apache.cocoon.components.source.impl.PartSourceFactory" name="upload"/>

    <!--+
        | The "*" protocol handles all uri schemes that are not explicitely
        | specified. This includes all JDK standard protocols.
        +-->
    <component-instance class="org.apache.excalibur.source.impl.URLSourceFactory" name="*"/>
  </source-factories>

  <!--+
      | Entity resolution catalogs
      |
      | The default catalog is distributed at WEB-INF/entities/catalog
      | This is the contextual pathname for Cocoon resources.
      | You can override this path, if necessary, using the "catalog" parameter:
      |
      |    <parameter name="catalog" value="WEB-INF/entities/catalog"/>
      |
      | However, it is probably desirable to leave this default catalog config
      | and declare your own local catalogs, which are loaded in addition to
      | the system catalog.
      |
      | There are various ways to do local configuration (see "Entity Catalogs"
      | documentation). One way is via the CatalogManager.properties file.
      | As an additional method, you can specify the "local-catalog"
      | parameter here.
      |
      | local-catalog:
      |   The full filesystem pathname to a single local catalog file.
      |
      |  <parameter name="local-catalog" value="/usr/local/sgml/mycatalog"/>
      |
      | verbosity:
      | The level of messages for status/debug (messages go to standard output)
      | The following messages are provided ...
      |  0 = none
      |  1 = ? (... not sure yet)
      |  2 = 1+, Loading catalog, Resolved public, Resolved system
      |  3 = 2+, Catalog does not exist, resolvePublic, resolveSystem
      |  10 = 3+, List all catalog entries when loading a catalog
      |    (Cocoon also logs the "Resolved public" messages.)
      |
      |     <parameter name="verbosity" value="2"/>
      +-->
	<entity-resolver logger="core.resolver">
		<parameter name="catalog" value="WEB-INF/dtd/catalog.txt"/>
		<parameter name="verbosity" value="1"/>
	</entity-resolver>

  <!--+
      | XML Parser
      |
      | Apache Cocoon requires a JAXP 1.1 parser. The default parser is
      | org.apache.excalibur.xml.impl.JaxpParser.
      | Note: If you have problems because your servlet environment uses its
      | own parser not conforming to JAXP 1.1 try using the alternative
      | XercesParser instead of the JaxpParser. To activate the XercesParser,
      | change the class attribute to
      |   class="org.apache.excalibur.xml.impl.XercesParser"
      | You will also need to add a system property to your JVM,
      | probably on the startup of your servlet engine like this:
      | -Dorg.apache.excalibur.xml.sax.SAXParser=org.apache.excalibur.xml.impl.XercesParser
      |
      | Configuration parameters for the JaxpParser (not the XercesParser!):
      | - validate (boolean, default = false): should the parser validate
      |     parsed documents?
      |     Note: XML validation is only being used for the documentation build.
      |     (If you are going to use it elsewhere, then do so with caution.)
      |     You really should have validated all of your XML documents already,
      |     according to their proper DTD or schema. Do not expect Cocoon
      |     to do it.
      | - namespace-prefixes (boolean, default = false) : do we want
      |     namespaces declarations also as 'xmlns:' attributes?
      |     Note : setting this to true confuses some XSL processors
      |     (e.g. Saxon).
      | - stop-on-warning (boolean, default = true) : should the parser
      |     stop parsing if a warning occurs ?
      | - stop-on-recoverable-error (boolean, default = true) : should the
      |     parser stop parsing if a recoverable error occurs ?
      | - reuse-parsers (boolean, default = true) : do we want to reuse
      |     parsers or create a new parser for each parse ?
      |     Note : even if this parameter is true, parsers are not recycled
      |     in case of parsing errors : some parsers (e.g. Xerces) do not like
      |     to be reused after failure.
      | - sax-parser-factory (string, optional) : the name of the
      |     SAXParserFactory implementation class to be used instead of using
      |     the standard JAXP mechanism (SAXParserFactory.newInstance()). This
      |     allows to choose unambiguously the JAXP implementation to be used
      |     when several of them are available in the classpath.
      | - document-builder-factory (string, optional) : the name of the
      |     DocumentBuilderFactory implementation to be used (similar to
      |     sax-parser-factory for DOM).
      | - drop-dtd-comments : should comment() events from DTD's be dropped?
      |     Note: Since this implementation does not support the DeclHandler
      |     interface anyway, it is quite useless to only have the comments
      |     from DTD. And the comment events from the internal DTD subset
      |     would appear in the serialized output again.
      +-->
  <xml-parser class="org.apache.excalibur.xml.impl.JaxpParser" logger="core.xml-parser" pool-max="32">
    <parameter name="validate" value="false"/>
    <parameter name="namespace-prefixes" value="false"/>
    <parameter name="stop-on-warning" value="true"/>
    <parameter name="stop-on-recoverable-error" value="true"/>
    <parameter name="reuse-parsers" value="false"/>
    <parameter name="drop-dtd-comments" value="true"/>
  </xml-parser>

  <!--+
      | XSLT Processor
      |
      | 'incremental-processing' (only works with Xalan) allows the XSLT
      | processor to start the output of the transformation as soon as possible.
      | if set to false, the transforer waits until the end of the
      | transformation to deliver the output.
      | WARNING: * if you enable incremental-processing, you should be aware of
      |            the following bug:
      |            http://issues.apache.org/bugzilla/show_bug.cgi?id=13186
      |          * incremental-processing creates an additional, non-pooled thread.
      |          * using incremental-processing does not save memory, the input
      |            tree will still be build completely.
      |          * incremental processing is a 'static' thing in Xalan: if you
      |            enable it on one xslt-processor, enable it on all.
      +-->
  <xslt-processor logger="core.xslt-processor">
     <parameter name="use-store" value="false"/>
     <parameter name="incremental-processing" value="false"/>
  </xslt-processor>

  <!--+
      | Xalan XSLT Processor
      +-->
  <component class="org.apache.cocoon.components.xslt.TraxProcessor" logger="core.xslt-processor" role="org.apache.excalibur.xml.xslt.XSLTProcessor/xalan">
     <parameter name="use-store" value="false"/>
     <parameter name="incremental-processing" value="false"/>
     <parameter name="transformer-factory" value="org.apache.xalan.processor.TransformerFactoryImpl"/>
  </component>

  <!-- Xpath Processor: -->
  <xpath-processor class="org.apache.excalibur.xml.xpath.XPathProcessorImpl" logger="core.xpath-processor"/>

  <!-- The XMLizers converts different mime-types to XML -->
  <xmlizer>
    <parser mime-type="text/xml" role="org.apache.excalibur.xml.sax.SAXParser"/>
    <parser mime-type="text/html" role="org.apache.excalibur.xml.sax.SAXParser/HTML"/>
  </xmlizer>

<!-- ============================ Object Stores =========================== -->

  <!--+
      | Transient Store: holds objects that don't have to survive shutdown
      |
      | Common configuration parameters:
      | maxobjects: Indicates how many objects will be held in the cache.
      |    When the number of maxobjects has been reached. The last object
      |    in the cache will be thrown out.
      +-->
  <transient-store logger="core.store.transient">
    <parameter name="maxobjects" value="1000"/>
  </transient-store>

  <!--+
      | Store: generic store. The default implementation is an in-memory store
      | backed by a disk store (based on EHCache). This forms a two-stage
      | cache composed of a fast in-memory MRU front-end and a persistent
      | back-end which stores the less-used objects.
      |
      | Common configuration parameters:
      | maxobjects: Indicates how many objects will be held in the cache.
      |    When the number of maxobjects has been reached. The last object
      |    in the cache will be thrown out.
      +-->
  <store logger="core.store">
    <parameter name="maxobjects" value="1000"/>
    <parameter name="use-cache-directory" value="true"/>
  </store>

  <!--+
      | Store Janitor: the store garbage collector and memory usage controller.
      |
      | WARNING: Be careful with the heapsize and freememory parameters.
      |           Wrong values can cause high cpu usage.
      |
      | Example configuration:
      | Jvm settings:
      |    -Xmx200000000
      | store-janitor settings:
      |    <parameter name="freememory" value="5000000"/>
      |    <parameter name="heapsize" value="196000000"/>
      |
      | It is recommended to have heapsize equal to -Xmx, especially on Sun's
      | JVM which are unable to shrink its heap once it grows above minimum.
      | Freememory should be greater than amount of memory necessary for normal
      | application operation.
      | BUT: The heap size of the memory of the JVM is a little bit less than
      |      the value you specify for -Xmx, so you have to set the heapsize
      |      for the store janitor to a value which is lower (2% less seems
      |      to be a working value).
      +-->
  <store-janitor logger="core.store.janitor">
    <!--+
        | How much free memory shall be available in the jvm?
        | If not specified, defaults to 1Mb.
        +-->
    <parameter name="freememory" value="2048000"/>
    <!--+
        | How much memory at max jvm can consume?
        | The default max heapsize for Sun's JVM is (almost) 64Mb,
        | can be increased by specifying -Xmx command line parameter.
        | If not specified, defaults to 66600000 bytes.
        +-->
    <parameter name="heapsize" value="66600000"/>
    <!--+
        | How often shall the cleanup thread check memory?
        | If not specified, defaults to 10 seconds.
        +-->
    <parameter name="cleanupthreadinterval" value="10"/>
    <!--+
        | Experimental adaptive algorithm for cleanup interval
    <parameter name="adaptivethreadinterval" value="true"/>
        +-->
    <!--+
        | What percent of the store elements shall be dropped on low memory?
        | If not specified, defaults to 10%
        +-->
    <parameter name="percent_to_free" value="10"/>
    <!--+
        | Shall garbage collector be invoked on low memory?
        | If not specified, defaults to false.
        +-->
    <parameter name="invokegc" value="false"/>

    <!--+
        | What should be the priority of the cleanup thread?
        | This parameter is used only by older implementation of the janitor.
        | New implementation uses centrally configured thread pool (see
        | thread-pools element below).
    <parameter name="threadpriority" value="5"/>
        +-->
  </store-janitor>

<!-- ====================== System Components =========================== -->

  <!--+
      | Runnable manager
      |
      | This component manages commands (Runnables) executed in background using
      | preconfigured pools of worker threads
      +-->
  <runnable-manager logger="core.runnable">
    <!--+
        | This is the default configuration of the runnable-manager. More
        | indepth information can be found at
        | http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/PooledExecutor.html
        | The following elements can be used:
        |
        | thread-factory:        specifies the fully qualified class name of an
        |                        org.apache.cocoon.components.thread.ThreadFactory
        |                        implementation. It is responsible to create Thread
        |                        classes.
        | thread-pools:          container element for thread-pool elements.
        | name:                  required name of the pool.
        | priority:              optional priority all threads of the pool will
        |                        have (the ThreadFactory will be set to this
        |                        priority).The possible values  are:
        |                          MIN:  corresponds to Thread#MIN_PRIORITY
        |                          NORM: corresponds to Thread#NORM_PRIORITY (default)
        |                          MAX:  corresponds to Thread#MAX_PRIORITY
        | daemon:                whether newly created Threads should run in
        |                        daemon mode or not. Default to false.
        | queue-size:            optional size of a queue to hold Runnables if the
        |                        pool is full. Possible values are:
        |                          less than 0:    unbounded (default)
        |                          equal to 0:     no queue at all
        |                          greater than 0: size of the queue
        | max-pool-size:         optional maximum number of threads in the pool.
        |                        Defaults to 5.
        |                        NOTE: if a queue is specified (queue-sie != 0)
        |                              this value will be ignored.
        | min-pool-size:         optional minimum number of threads in the pool.
        |                        Defaults to 5.
        |                        NOTE: if a queue has been specified (queue-sie != 0)
        |                              this value will be used as the maximum of
        |                              thread running concurrently.
        | keep-alive-time-ms:    The time in ms an idle thread should keep alive
        |                        before it might get garbage collected. This
        |                        defaults to 60000 ms.
        | block-policy;          The policy to be used if all resources (thread in
        |                        the pool and slots in the queue) are exhausted.
        |                        Possible values are:
        |                          ABORT:         Throw a RuntimeException
        |                          DISCARD:       Throw away the current request
        |                                         and return.
        |                          DISCARDOLDEST: Throw away the oldest request
        |                                         and return.
        |                          RUN (default): The thread making the execute
        |                                         request runs the task itself.
        |                                         This policy helps guard against
        |                                         lockup.
        |                          WAIT:          Wait until a thread becomes
        |                                         available. This policy should, in
        |                                         general, not be used if the
        |                                         minimum number of threads is zero,
        |                                         in which case a thread may never
        |                                         become available.
        | shutdown-graceful:     Terminate thread pool after processing all
        |                        Runnables currently in queue. Any Runnable entered
        |                        after this point will be discarded. A shut down
        |                        pool cannot be restarted. This also means that a
        |                        pool will need keep-alive-time-ms to terminate.
        |                        The default value not to shutdown graceful.
        | shutdown-wait-time-ms: The time in ms to wait before issuing an
        |                        immediate shutdown after a graceful shutdown
        |                        has been requested.
        +-->
    <thread-factory>org.apache.cocoon.components.thread.DefaultThreadFactory</thread-factory>
    <thread-pools>
      <!--+
          | This is the default thread pool. It's use fits best for short
          | running background tasks.
          +-->
      <thread-pool>
        <name>default</name>
        <priority>NORM</priority>
        <daemon>false</daemon>
        <queue-size>-1</queue-size>
        <max-pool-size>5</max-pool-size>
        <min-pool-size>5</min-pool-size>
        <keep-alive-time-ms>60000</keep-alive-time-ms>
        <block-policy>ABORT</block-policy>
        <shutdown-graceful>false</shutdown-graceful>
        <shutdown-wait-time-ms>-1</shutdown-wait-time-ms>
      </thread-pool>
      <!--+
          | This thread pool should be used for daemons (permanently running
          | threads).
          +-->
      <thread-pool>
        <name>daemon</name>
        <priority>NORM</priority>
        <daemon>true</daemon>
        <queue-size>0</queue-size>
        <max-pool-size>-1</max-pool-size>
        <min-pool-size>1</min-pool-size>
        <keep-alive-time-ms>60000</keep-alive-time-ms>
        <block-policy>ABORT</block-policy>
        <shutdown-graceful>false</shutdown-graceful>
        <shutdown-wait-time-ms>-1</shutdown-wait-time-ms>
      </thread-pool>
    </thread-pools>
  </runnable-manager>
</cocoon>
