<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2015 Anyware Services

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   -->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

	<map:components>
        <map:generators>
            <map:generator name="rights-context-application" src="org.ametys.plugins.core.right.ApplicationContextGenerator" logger="org.ametys.plugins.core.right" label="content"/>

			<map:generator name="rights-profile-rights" src="org.ametys.plugins.core.right.profile.ProfileRightsGenerator" logger="org.ametys.plugins.core.right.profile" label="content"/>
            
            <map:generator name="user-prefs-def" src="org.ametys.plugins.core.userpref.UserPreferencesGenerator" logger="org.ametys.plugins.core.userpref.UserPreferencesGenerator"/>
            <map:generator name="user-prefs" src="org.ametys.plugins.core.userpref.UserPreferencesValuesGenerator" logger="org.ametys.plugins.core.userpref.UserPreferencesValuesGenerator"/>
            <map:generator name="user-prefs-errors" src="org.ametys.plugins.core.userpref.UserPreferencesErrorsGenerator" logger="org.ametys.plugins.core.userpref.UserPreferencesErrorsGenerator"/>
            
            <map:generator name="login-screen" src="org.ametys.plugins.core.authentication.LoginScreenGenerator"/>
        </map:generators>
        
		<map:actions>
            <map:action name="set-header" src="org.apache.cocoon.acting.HttpHeaderAction" logger="org.ametys.plugins.core.administrator.sitemap.action.httpHeader"/>

            <map:action name="users-search" src="org.ametys.plugins.core.user.UserSearchAction" logger="org.ametys.plugins.core.user"/>
            <map:action name="groups-search" src="org.ametys.plugins.core.group.GroupSearchAction" logger="org.ametys.plugins.core.group"/>
            <map:action name="group-users" src="org.ametys.plugins.core.group.UsersGroupAction" logger="org.ametys.plugins.core.group"/>
            <map:action name="profiles-search" src="org.ametys.plugins.core.right.profile.ProfileSearchAction" logger="org.ametys.plugins.core.group"/>
            
            <map:action name="get-rights" src="org.ametys.plugins.core.right.GetRightsAction" logger="org.ametys.plugins.core.right"/>
            
            <map:action name="captcha" src="org.ametys.plugins.core.captcha.CreateCaptchaAction" logger="org.ametys.plugins.core.captcha"/>
            <map:action name="upload-store" src="org.ametys.plugins.core.upload.UploadAction" logger="org.ametys.plugins.core.upload"/>
            
            <map:action name="get-parent-context-attr" src="org.ametys.core.util.GetParentContextAttributeAction" logger="org.ametys.plugins.core.util"/>

			<map:action name="user-prefs-def" src="org.ametys.plugins.core.userpref.GetUserPreferencesAction" logger="org.ametys.plugins.core.userpref.GetUserPreferencesAction"/>
            <map:action name="save-userprefs" src="org.ametys.plugins.core.userpref.SetUserPreferencesAction" logger="org.ametys.plugins.core.userpref.SetUserPreferencesAction"/>
            
            <map:action name="resource-exists" src="org.apache.cocoon.acting.ResourceExistsAction"/>
            <map:action name="has-right" src="org.ametys.plugins.core.right.HasRightAction" logger="org.ametys.plugins.core.right">
                <has-right>true</has-right>
            </map:action>
             <map:action name="has-not-right" src="org.ametys.plugins.core.right.HasRightAction" logger="org.ametys.plugins.core.right">
                <has-right>false</has-right>
            </map:action>
		</map:actions>
		
        <map:readers>
            <map:reader name="upload-reader" src="org.ametys.plugins.core.upload.UploadReader" logger="org.ametys.plugins.core.upload"/>
            <map:reader name="buffered-image" src="org.ametys.core.captcha.BufferedImageReader" logger="org.ametys.plugins.core.captcha"/>
            <map:reader name="json" src="org.ametys.core.cocoon.JSonReader"/>
        </map:readers>
        
        <map:selectors>
        	<map:selector name="resource-exists" src="org.apache.cocoon.selection.ResourceExistsSelector"/>
        </map:selectors>
        
	</map:components>
	
	<map:views>
		<map:view from-label="content" name="content">
			<map:serialize type="xml"/>
		</map:view>
	</map:views>

	
	<map:pipelines>
		<map:pipeline type="noncaching" internal-only="true">
            <map:match pattern="login.html">
                <map:generate type="login-screen" label="content"/>
                
            	<map:select type="resource-exists">
            		<map:when test="context://WEB-INF/param/login.xsl">
		            	<map:transform type="xslt" src="context://WEB-INF/param/login.xsl"/>
            		</map:when>
            		<map:otherwise>
		            	<map:transform type="xslt" src="plugin:core-ui://pages/login/login.xsl"/>
            		</map:otherwise>
            	</map:select>
            	
                <map:transform type="i18n" label="xml">
                    <map:parameter name="locale" value="{locale:locale}"/>
                    <map:parameter name="default-catalogue-id" value="application"/>
                </map:transform>
                <map:serialize/>
            </map:match>
            
		    <map:match pattern="logout.html">
	            <map:generate type="action-result"/>
                <map:transform src="plugin:core-ui://pages/login/logout.xsl"/>
                <map:transform type="i18n">
                    <map:parameter name="locale" value="{locale:locale}"/>
                    <map:parameter name="workspace" value="{request-attr:workspaceName}"/>
                </map:transform>
                <map:serialize/>
		    </map:match>
        </map:pipeline>
        
		<map:pipeline>
            <!-- +
                 | USERS
                 + -->
            <map:match pattern="users/search.json">
                <map:act type="users-search" src="{request-param:criteria}">
                    <map:parameter name="limit" value="{request-param:limit}"/>
                    <map:parameter name="start" value="{request-param:start}"/>
                    
                    <map:read type="json"/>
                </map:act>
            </map:match>
                
			<!-- +
                 | GROUPS
                 + -->
            <map:match pattern="groups/search.json">
                <map:act type="groups-search" src="{request-param:criteria}">
                    <map:parameter name="start" value="{request-param:start}"/>
                    <map:parameter name="limit" value="{request-param:limit}"/>
                    
                    <map:read type="json"/>
                </map:act>
            </map:match>
            
            <map:match pattern="group/users">
				<map:act type="group-users" src="{request-param:groupID}">
                    <map:parameter name="limit" value="{request-param:limit}"/>
                    <map:parameter name="start" value="{request-param:start}"/>
                    
                    <map:read type="json"/>
                </map:act>
            </map:match>
            
			<!-- +
                 | RIGHTS
                 + -->
            <!-- 
                TODO : Review right protection
                Waiting for rights refactoring probably
             -->
			<!-- <map:match pattern="rights/**">
                <map:act type="has-not-right" src="Runtime_Rights_Rights_Handle">
                    <map:parameter name="context" value="{request-param:context}"/>
                </map:act>
            </map:match> -->
            
            <map:match pattern="rights/profiles.json">
                <map:act type="profiles-search">
                    <map:read type="json"/>
                </map:act>
            </map:match>
            
            <map:match pattern="rights/rights.json">
                <map:act type="get-rights">
                    <map:read type="json"/>
                </map:act>
            </map:match>
           
			<map:match pattern="rights/profile.xml">
				<map:generate type="rights-profile-rights"/>
				<map:transform src="pages/rights/rights.xsl"/>
				<map:transform type="i18n">
					<map:parameter name="locale" value="{locale:locale}"/>
					<map:parameter name="default-catalogue-id" value="plugin.core"/>
				</map:transform>
				<map:serialize type="xml"/>
			</map:match>
            
			<!-- +
                 | UPLOADS
                 + -->
            <map:match pattern="upload/store">
                <map:act type="upload-store">
                    <map:read type="json"/>
                </map:act>
            </map:match>
            
            <map:match pattern="upload/file">
                <map:read type="upload-reader">
					<map:parameter name="download" value="{request-param:download}"/>
					<map:parameter name="height" value="{request-param:height}"/>
					<map:parameter name="width" value="{request-param:width}"/>
					<map:parameter name="maxHeight" value="{request-param:maxHeight}"/>
					<map:parameter name="maxWidth" value="{request-param:maxWidth}"/>
                </map:read>
            </map:match>
            
            <!-- +
                 | USERPREFS
                 + -->
            <map:match pattern="userprefs/def.xml">
                <map:generate type="user-prefs-def">
                	<map:parameter name="excludePrivate" value="{request-param:excludePrivate}"/>
                </map:generate>
                <map:transform type="i18n">
                    <map:parameter name="locale" value="{locale:locale}"/>
                    <map:parameter name="plugin" value="{request-attr:pluginName}"/>
                </map:transform>
                <map:serialize type="xml"/>
            </map:match>
            
            <map:match pattern="userprefs/def.json">
                <map:act type="user-prefs-def">
                	<map:parameter name="excludePrivate" value="{request-param:excludePrivate}"/>
					<map:read type="json"/>
                </map:act>
            </map:match>
            
            <map:match pattern="userprefs/values.xml">
                <map:generate type="user-prefs"/>
                <map:serialize type="xml"/>
            </map:match>
            
            <map:match pattern="userprefs/errors.xml">
                <map:generate type="user-prefs-errors"/>
                <map:serialize type="xml"/>
            </map:match>
            
            <map:match pattern="userprefs/save.xml">
                <map:act type="save-userprefs">
                    <map:aggregate element="xml">
                        <map:part src="cocoon:/userprefs/values.xml?prefContext={request-param:prefContext}"/>
                        <map:part src="cocoon:/userprefs/errors.xml"/>
                    </map:aggregate>
                    <map:transform type="i18n">
                        <map:parameter name="locale" value="{locale:locale}"/>
                        <map:parameter name="plugin" value="{request-attr:pluginName}"/>
                    </map:transform>
                    <map:serialize type="xml"/>
                </map:act>
            </map:match>                 
            
            <!-- +
                 | Webservice to know about rights
                 + -->
            <map:match pattern="has-right">
				<map:act type="has-right" src="{request-param:rights}">
					<map:parameter name="context" value="{request-param:context}"/>
					<map:generate type="action-result">
						<map:parameter name="hasRight" value="true"/>
					</map:generate>
					<map:serialize type="xml"/>
				</map:act>
				<map:generate type="action-result">
					<map:parameter name="hasRight" value="false"/>
				</map:generate>
				<map:serialize type="xml"/>
			</map:match>
			
			<!-- +
				 | CAPTCHA 
				 + -->
			<map:match pattern="captcha/*/image.png">
				<map:act type="set-header">
					<map:parameter name="Cache-Control" value="max-age=0"/>
					<map:parameter name="Expires" value="0"/>
				</map:act>
				<map:act type="captcha" src="{1}">
					<map:parameter name="cancelledKey" value="{request-param:cancelledKey}"/>
					<map:parameter name="color" value="{request-param:color}"/>
					<map:parameter name="noise" value="{request-param:noise}"/>
					<map:parameter name="fisheye" value="{request-param:fisheye}"/>
					<map:parameter name="width" value="{request-param:width}"/>
					<map:parameter name="height" value="{request-param:height}"/>
					<map:read type="buffered-image">
						<map:parameter name="key" value="{1}"/>
					</map:read>
				</map:act>
			</map:match>
			
            <!-- Google maps API key -->
            <map:match pattern="google-api-key/get">
                <map:generate type="action-result">
                    <map:parameter name="apiKey" value="{config:runtime.google-api-key}"/>
                </map:generate>
                <map:serialize type="xml"/>
            </map:match>
        </map:pipeline>
	</map:pipelines>
</map:sitemap>