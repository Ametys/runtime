<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2009 Anyware Services

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   -->
<xsd:schema xmlns="http://www.ametys.org/schema/plugin"
            xmlns:plugin="http://www.ametys.org/schema/plugin"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.ametys.org/schema/plugin"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>

    <xsd:element name="plugin" type="plugin">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <![CDATA[
                    The root element of the plugin file.
                ]]>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:unique name="unique-featureName">
            <xsd:selector xpath="plugin:feature"/>
            <xsd:field xpath="@name"/>
        </xsd:unique>
    </xsd:element>

    <xsd:complexType name="plugin">
        <xsd:sequence>
            <xsd:element name="config" type="config-definition" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of shared config parameters.<br/>
                            Parameters declared in this section must be referenced in an active feature to be actually used.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:unique name="unique-configParam">
                    <xsd:selector xpath="plugin:param"/>
                    <xsd:field xpath="@id"/>
                </xsd:unique>
                <xsd:unique name="unique-paramChecker">
                    <xsd:selector xpath="plugin:param-checker"/>
                    <xsd:field xpath="@id"/>
                </xsd:unique>
            </xsd:element>
            <xsd:element name="extension-points" type="extension-points" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of extension points (single or multiple)
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:unique name="unique-extensionPoint">
                    <xsd:selector xpath="plugin:extension-point"/>
                    <xsd:field xpath="@id"/>
                </xsd:unique>
            </xsd:element>
            <xsd:element name="feature" type="feature" maxOccurs="unbounded" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Features are the heart of plugins : it holds declarations of components, extensions (to extension points), config parameters, ...<br/>
                            All elements declared in a feature are somehow linked : if one extension is unactivated, the whole feature is. 
                            This mecanism allows to have more control on components actually loaded by application.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="version" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                            Allows to specify the version of the plugin to check dependencies.<br/>
                            As of Runtime version 2.0, this attribute is not actually used.
                        ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="runtimeVersion" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                            Allows to specify the version of the plugin schema used by this plugin definition.<br/>
                            This schema only accepts "2.0" as value.
                        ]]>
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="4.0"></xsd:enumeration>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="feature">
        <xsd:all>
            <xsd:element name="config" type="config-definition-and-references" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of specific config parameters or references to shared parameters.<br/>
                            To reference a shared parameter simply put its id in the 'id' attribute of the 'param' element and keep the element empty.<br/>
                            To declare a specific parameter, do it the same way as shared parameters (no need to reference it).
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:unique name="unique-featureConfigParam">
                    <xsd:selector xpath="plugin:param"/>
                    <xsd:field xpath="@id"/>
                </xsd:unique>
                <xsd:unique name="unique-featureParamChecker">
                    <xsd:selector xpath="plugin:param-checker"/>
                    <xsd:field xpath="@id"/>
                </xsd:unique>
            </xsd:element>
            <xsd:element name="components" type="components" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of avalon components.<br/>
                            Avalon components declared here (by opposition with thoses declared in the cocoon.xconf) can use extensions, reference parameters, ...
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:unique name="unique-componentRole">
                    <xsd:selector xpath="plugin:component"/>
                    <xsd:field xpath="@role"/>
                </xsd:unique>
            </xsd:element>
            <xsd:element name="extensions" type="extensions" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of extensions.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:unique name="unique-extension">
                    <xsd:selector xpath="plugin:extension"/>
                    <xsd:field xpath="@point"/>
                    <xsd:field xpath="@id"/>
                </xsd:unique>
            </xsd:element>
        </xsd:all>
        <xsd:attribute name="name" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        Name of the feature. Must be unique within this plugin.<br/>
                        The full name of a feature is the concatenation of the plugin name, '/' and the feature name.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:pattern value="[a-zA-Z0-9]([a-zA-Z0-9\-_\.]*[a-zA-Z0-9])?"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="depends" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        Declares dependencies on a comma separated list of another features.<br/>
                        If the referenced feature is declared in this plugin, you may use its local name, otherwise you must use its full name (plugin name + '/' + local feature name).<br/>
                        If the referenced feature does not exist or is unactivated, this feature will be also unactivated.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_\.]*[a-zA-Z0-9])?/)?[a-zA-Z0-9]([a-zA-Z0-9\-_\.]*[a-zA-Z0-9])?(, *([a-zA-Z0-9]([a-zA-Z0-9\-_\.]*[a-zA-Z0-9])?/)?[a-zA-Z0-9]([a-zA-Z0-9\-_\.]*[a-zA-Z0-9])?)*"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="deactivates" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        Deactivates a comma separated list of another features.<br/>
                        If the referenced feature is declared in this plugin, you may use its local name, otherwise you must use its full name (plugin name + '/' + local feature name).<br/>
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:pattern value="([a-zA-Z0-9]([a-zA-Z0-9\-_\.]*[a-zA-Z0-9])?/)?[a-zA-Z0-9]([a-zA-Z0-9\-_\.]*[a-zA-Z0-9])?(, *([a-zA-Z0-9]([a-zA-Z0-9\-_\.]*[a-zA-Z0-9])?/)?[a-zA-Z0-9]([a-zA-Z0-9\-_\.]*[a-zA-Z0-9])?)*"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="passive" type="xsd:boolean" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        Declares this feature as passive, meaning it useless if not used by another feature.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="safe" type="xsd:boolean" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        Declares this feature as safe, meaning it is loaded even in safe mode.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="extension-points">
        <xsd:sequence>
            <xsd:element name="extension-point" type="extension-point" maxOccurs="unbounded" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of a multiple extension point.<br/>
                            A multiple extension point is a component that can "host" several extensions, declared in different plugins and features.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="extension-point">
        <xsd:sequence>
            <xsd:any processContents="lax" maxOccurs="unbounded" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The unique identifier of the extension point.<br/>
                        This value is also the avalon role (and must be unique in this point of view)
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="class" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The java (concrete) class defining the extension point.<br/>
                        Extensions declared later in this file or in others plugin files will hang on to this class through appropriate methods.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="safe" type="xsd:boolean" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        Declares this extension point as safe, meaning it is loaded even in safe mode.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
        <xsd:attribute name="config" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        If this attributed is set, it references an external config file : an absolute value (beginning with '/') references a path relative to the webapp context path, a relative path is computed relatively to the plugin.xml file.<br/>
                        If the attribute is not set, the configuration of the extension point is constituted by the nested tags.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
         <xsd:attribute name="logger" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The category of the logger passed to the component, if it implements the LogEnabled interface.<br/>If ommitted, the class name is used.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="extensions">
        <xsd:sequence>
            <xsd:element name="extension" type="extension" maxOccurs="unbounded" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of an extension.<br/>
                            It may be an implementation of a single extension point (and will so be disabled if it is not the choosen implementation).<br/>
                            It may be an extension to a multiple extension point (and will so become available for any component).
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="extension">
        <xsd:sequence>
            <xsd:any processContents="lax" maxOccurs="unbounded" minOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The unique identifier of the extension.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="point" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                       The id of the extension point to extend.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="class" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        This attribute may or may not exist, depending of the implementation. However, it is a good idea to use this attribute since javadoc will be automatically linked.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="config" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        If this attributed is set, it references an external config file : an absolute value (beginning with '/') references a path relative to the webapp context path, a relative path is computed relatively to the plugin.xml file.<br/>
                        If the attribute is not set, the configuration of the extension point is constituted by the nested tags.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="logger" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        If this extension defines a class as an avalon component, this attribute may be used as the category af the associated logger.<br/>
                        This behaviour is automatic for extension to single extension point, and depends on the implementation of the extension point for multiple extension points.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="components">
        <xsd:sequence>
            <xsd:element name="component" type="component" maxOccurs="unbounded" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of an avalon component.<br/>
                            This component may access extensions, may reference config parameters and may be unactivated if not used.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>            
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="component">
        <xsd:sequence>
            <xsd:any processContents="lax" maxOccurs="unbounded" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="class" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The concrete java class of the avalon component.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
        <xsd:attribute name="role" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The avalon role of this component.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
        <xsd:attribute name="id" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The unique id of this component.
                        If more than one component has the same role but no id, an exception is thrown at startup.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
        <xsd:attribute name="config" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        If this attributed is set, it references an external config file : an absolute value (beginning with '/') references a path relative to the webapp context path, a relative path is computed relatively to the plugin.xml file.<br/>
                        If the attribute is not set, the configuration of the extension point is constituted by the nested tags.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
        <xsd:attribute name="logger" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The category of the logger passed to the component, if it implements the LogEnabled interface.<br/>If ommitted, the class name is used.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
    </xsd:complexType>
    
    <xsd:complexType name="config-definition">
        <xsd:sequence>
            <xsd:element name="param" type="config-parameter" maxOccurs="unbounded" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of a config parameter or reference to an existing one.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>            
            </xsd:element>
            <xsd:element name="param-checker" type="param-checker" maxOccurs="unbounded" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of a parameter checker.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>            
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    
    <xsd:complexType name="config-definition-and-references">
        <xsd:complexContent>
            <xsd:extension base="config-definition">
                <xsd:sequence>
                    <xsd:element name="param-ref" type="config-parameter-reference" maxOccurs="unbounded" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation xml:lang="en">
                                <![CDATA[
                                    Declaration of a config parameter or reference to an existing one.
                                ]]>
                            </xsd:documentation>
                        </xsd:annotation>            
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="parameter">
        <xsd:sequence>
            <xsd:element name="label" type="i18n-entry" maxOccurs="1" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            The i18n key to use for the label of the parameter in the current catalogue.<br/>
                            The label is a short string : a kind of name for the parameter.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>            
            </xsd:element>
            <xsd:element name="description" type="i18n-entry" maxOccurs="1" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            The i18n key to use for the description of the parameter in the current catalogue.<br/>
                            The description is a sentence explaining the parameter and containing samples of values.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>            
            </xsd:element>
            <xsd:element name="widget" type="xsd:string" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            The widget to show to the user to make it change the value.<br/>
                            Depends on the type.<br/>
                            As of Runtime version 1.2, the builtin configuration screen only have one widget per type and will not read this value.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>            
            </xsd:element>
            <xsd:element name="widget-params" type="widget-parameters" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            The optional widget's parameters.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>            
            </xsd:element>            
            <xsd:element name="enumeration" type="enumeration" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Allows to define a list of possible values for this parameter.<br/>
                            A custom enumerator can be used to choose the values in Java:
                            the class must inherit org.ametys.runtime.util.parameter.Enumerator.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="validation" type="validation" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Allows to define validation for this parameter.<br/>
                            A custom validator can be used to validate the value in Java:
                            the class must inherit org.ametys.runtime.util.parameter.Validator.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="disable-conditions" type="disable-conditions" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Allows to define disabling conditons for this parameter.<br/>
                            One or several disabling conditions can be used to shade a field in Java:
                            the class must inherit org.ametys.runtime.util.parameter.DisableConditions.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    
    <xsd:complexType name="widget-parameters">
        <xsd:sequence>
            <xsd:element name="param" type="widget-parameter" maxOccurs="unbounded" minOccurs="0">
               <xsd:annotation>
                   <xsd:documentation xml:lang="en">
                       <![CDATA[
                            Declaration of a widget parameter
                       ]]>
                   </xsd:documentation>
               </xsd:annotation>            
           </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    
    <xsd:complexType name="widget-parameter">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="name" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The name of parameter
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>            
                </xsd:attribute>
                <xsd:attribute name="i18n" type="xsd:boolean" use="optional" default="false">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                If <code>true</code> the value is a i18n key, <code>false</code> if the value is used without substitution.<br/>
                                The i18n key can contains the catalogue like <code>plugins.core:key</code> and then override the optional
                                <code>catalogue</code> attribute.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="catalogue" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The catalogue to use for the i18n key, default is to use the current plugin catalogue.<br/>
                                The attribute may reference an other existing catalogue (e.g. plugin.core)
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
        
    <xsd:complexType name="enumeration">
        <xsd:choice>
            <xsd:element name="entry" type="enumeration-entry" maxOccurs="unbounded" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Allows to define a list of possible values for this parameter.<br/>
                            A custom enumerator can be used to choose the values in Java:
                            the class must inherit <code>org.ametys.runtime.util.parameter.Enumerator.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="custom-enumerator" type="local-component" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of the Avalon component to use.<br/>
                            The custom enumerator class must inherit <code>org.ametys.runtime.util.parameter.Enumerator</code>.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:choice>
    </xsd:complexType>
    
    <xsd:complexType name="enumeration-entry">
        <xsd:sequence>
            <xsd:element name="label" type="i18n-entry" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            The label to display when this entry is selected.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="value" type="xsd:string" maxOccurs="1" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            The value to store when this entry is selected.<br/>
                            If the label element is not used, this value will be displayed.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    
    <xsd:complexType name="validation">
        <xsd:choice>
            <xsd:sequence>
                <xsd:element name="mandatory" maxOccurs="1" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The value is mandatory and therefore can not be empty.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="regexp" type="xsd:string" maxOccurs="1" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The regexp pattern to use for validating the value.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="invalidText" type="i18n-entry" maxOccurs="1" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The text error to use if regexp fails.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
            <xsd:element name="custom-validator" type="local-component" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of the Avalon component to use.<br/>
                            The custom validator class must inherit <code>org.ametys.runtime.util.parameter.Enumerator</code>.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:choice>
    </xsd:complexType>
    
    <!--  DISABLE CONDITIONS -->
    <xsd:complexType name="disable-conditions">
        <xsd:sequence>
            <xsd:element name="condition" type="condition" maxOccurs="unbounded" minOccurs="0">
                <xsd:annotation>
                   <xsd:documentation xml:lang="en">
                       <![CDATA[
                           Declaration of one or several condition(s). The type of the parent element specifies if it is an union or an intersection.
                       ]]>
                   </xsd:documentation>
               </xsd:annotation>
            </xsd:element>
            <xsd:element name="conditions" type="conditions" maxOccurs="unbounded" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Declaration of the conditions to use.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>          
        </xsd:sequence>
        <xsd:attribute name="type" use="optional" default="and">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The type of the conditions: union or intersection (default is and)
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                  <xsd:enumeration value="and"/>
                  <xsd:enumeration value="or"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:complexType>
    
    <xsd:element name="conditions" type="conditions"/>
    
    <xsd:complexType name="conditions">
        <xsd:sequence> 
            <xsd:element name="condition" type="condition" maxOccurs="unbounded" minOccurs="0"/>
            <xsd:element name="conditions" type="conditions" maxOccurs="unbounded" minOccurs="0"/> 
        </xsd:sequence>
        <xsd:attribute name="type" use="optional" default="and">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The type of the conditions: union or intersection (default is and)
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="and"/>
                    <xsd:enumeration value="or"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:complexType>
    
    <xsd:complexType name="condition">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="id" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The id of the parameter used in the condition
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>            
                </xsd:attribute>
                <xsd:attribute name="operator" use="required">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The operator used in the evaluation of the condition ( id op value )
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                            <xsd:enumeration value="eq"/>
                               <xsd:enumeration value="neq"/>
                                <xsd:enumeration value="lt"/>
                                <xsd:enumeration value="leq"/>
                                <xsd:enumeration value="gt"/>
                                <xsd:enumeration value="geq"/>
                            </xsd:restriction>
                    </xsd:simpleType>            
                </xsd:attribute>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="local-component">
        <xsd:sequence>
            <xsd:any processContents="lax" maxOccurs="unbounded" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="class" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The concrete java class of the avalon component.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="param-checker">
        <xsd:all>    
            <xsd:element name="label" type="i18n-entry" maxOccurs="1" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Set the value to an i18n key to define the label of the parameter checker. <br/>
                            The default catalogue is the current one but the 'catalogue' attribute may define another plugin catalogue.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="description" type="i18n-entry" maxOccurs="1" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Set the value to an i18n key to define the description of the parameter checker.<br/>
                            The default catalogue is the current one but the 'catalogue' attribute may define another plugin catalogue.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="icon-small" type="icon" maxOccurs="1" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Set the value of the plugin attribute to specify the plugin the icon is in. </br>
                            The tag value is the relative path to the icon.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="icon-medium" type="icon" maxOccurs="1" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Set the value of the plugin attribute to specify the plugin the icon is in. </br>
                            The tag value is the relative path to the icon.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="icon-large" type="icon" maxOccurs="1" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        <![CDATA[
                            Set the value of the plugin attribute to specify the plugin the icon is in. </br>
                            The tag value is the relative path to the icon.
                        ]]>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="configuration" maxOccurs="1" minOccurs="0"/>
            <xsd:element name="ui-ref" type="ui-ref" maxOccurs="1" minOccurs="1"/>
            <xsd:element name="linked-params" type="linked-params" maxOccurs="1" minOccurs="1"/>
        </xsd:all>
        <xsd:attribute name="id" use="required">
            <xsd:annotation>
                 <xsd:documentation xml:lang="en">
                     <![CDATA[
                         The id of the parameter checker, must be unique.
                     ]]>
                 </xsd:documentation>
            </xsd:annotation>            
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:pattern value="[a-zA-Z][a-zA-Z0-9\.\-_]*"/>
                </xsd:restriction>
            </xsd:simpleType>     
        </xsd:attribute>
        <xsd:attribute name="class" type="xsd:string" use="required">
             <xsd:annotation>
                 <xsd:documentation xml:lang="en">
                     <![CDATA[
                         The concrete java class implementing the ParameterChecker interface, performing the test.
                     ]]>
                 </xsd:documentation>
             </xsd:annotation>            
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="ui-ref">
        <xsd:sequence>
            <xsd:element name="order" type="xsd:integer" minOccurs="1" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                         <![CDATA[
                             The id of the linked parameter, must be unique.
                         ]]>
                     </xsd:documentation>
                 </xsd:annotation>
            </xsd:element>
            <xsd:choice>
                <xsd:element name="param-ref" type="param-ref" minOccurs="1" maxOccurs="1"/>
                <xsd:sequence>
                  <xsd:element name="category" type="i18n-entry" minOccurs="1" maxOccurs="1"/>
                  <xsd:element name="group" type="i18n-entry" minOccurs="0" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:choice>
        </xsd:sequence>
    </xsd:complexType>
    
    <xsd:complexType name="linked-params">
        <xsd:sequence>
            <xsd:element name="param-ref" type="param-ref" maxOccurs="unbounded" minOccurs="1"/>
        </xsd:sequence>
    </xsd:complexType>
    
    <xsd:complexType name="param-ref">
        <xsd:attribute name="id" type="xsd:string" use="required">
             <xsd:annotation>
                 <xsd:documentation xml:lang="en">
                     <![CDATA[
                         The id of the linked parameter, must be unique.
                     ]]>
                 </xsd:documentation>
             </xsd:annotation>            
        </xsd:attribute> 
    </xsd:complexType>
    
    <xsd:complexType name="icon">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="plugin" type="xsd:string" use="optional">
                     <xsd:annotation>
                         <xsd:documentation xml:lang="en">
                             <![CDATA[
                                The plugin the icon is in.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>            
                </xsd:attribute> 
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
    
    
    <xsd:complexType name="config-parameter">
        <xsd:complexContent>
            <xsd:extension base="parameter">
                <xsd:sequence>
                    <xsd:element name="default-value" type="xsd:string" maxOccurs="1" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation xml:lang="en">
                                <![CDATA[
                                    The default value to present to the user the first time the parameter is edited.
                                ]]>
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="category" type="i18n-entry" maxOccurs="1" minOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation xml:lang="en">
                                <![CDATA[
                                    The view for setting the configuration is mainly divided in categories.<br/>
                                    You can choose the category to put this item by setting the value to an i18n key.<br/>
                                    The default catalogue is the current one but the 'catalogue' attribute may define another plugin catalogue.
                                ]]>
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="group" type="i18n-entry" maxOccurs="1" minOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation xml:lang="en">
                                <![CDATA[
                                    The category is subdivided in groups.<br/>
                                    You can choose the groups to put this item by setting the value to an i18n key.<br/>
                                    The default catalogue is the current one but the 'catalogue' attribute may define another plugin catalogue.
                                ]]>
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="order" type="xsd:integer" maxOccurs="1" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation xml:lang="en">
                                <![CDATA[
                                    In the current group, the order value (an integer) allows to change the display order of parameters.<br/>
                                    Lower numbers are displayed first.
                                ]]>
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="widget" type="xsd:string" maxOccurs="1" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation xml:lang="en">
                                <![CDATA[
                                    The widget to use to edit the parameter.
                                ]]>
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="disable-conditions" type="disable-conditions" maxOccurs="1" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation xml:lang="en">
                                <![CDATA[
                                    The condition that disables this parameter.
                                ]]>
                            </xsd:documentation>
                        </xsd:annotation>  
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="id" use="required">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The id of the parameter, must be unique.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>       
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                            <xsd:pattern value="[a-zA-Z][a-zA-Z0-9\.\-_]*"/>
                        </xsd:restriction>
                    </xsd:simpleType>     
                </xsd:attribute>
                <xsd:attribute name="type" use="required">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The type of parameter.
                                <ul>
                                    <li>boolean</li>
                                    <li>string</li>
                                    <li>password (string stored encoded and not human readable)</li>
                                    <li>long</li>
                                    <li>double</li>
                                    <li>date (date and time)</li>
                                </ul>
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                            <xsd:enumeration value="boolean"/>
                            <xsd:enumeration value="string"/>
                            <xsd:enumeration value="password"/>
                            <xsd:enumeration value="long"/>
                            <xsd:enumeration value="double"/>
                            <xsd:enumeration value="date"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="group-switch" type="xsd:boolean" use="optional">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                Determine if this parameter is the switcher for its group. There can be zero of one switcher per group. It must be a boolean parameter.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>            
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="config-parameter-reference">
        <xsd:attribute name="id" use="required">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <![CDATA[
                        The id to the referenced parameter.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                     <xsd:pattern value="[a-zA-Z][a-zA-Z0-9\.\-_]*"/>
                </xsd:restriction>
            </xsd:simpleType>     
        </xsd:attribute>
    </xsd:complexType>
    
    <xsd:complexType name="i18n-entry">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="i18n" type="xsd:boolean" use="optional" default="false">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                If <code>true</code> the value is a i18n key, <code>false</code> if the value is used without substitution.<br/>
                                The i18n key can contains the catalogue like <code>plugins.core:key</code> and then override the optional
                                <code>catalogue</code> attribute.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="catalogue" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation xml:lang="en">
                            <![CDATA[
                                The catalogue to use for the i18n key, default is to use the current plugin catalogue.<br/>
                                The attribute may reference an other existing catalogue (e.g. plugin.core)
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
</xsd:schema>
